name: üõ°Ô∏è Intake Step3 Gate - Clinical Assessment Module CI

on:
  pull_request:
    branches: [main, develop, release/*]
    paths:
      - 'src/modules/intake/**'
      - 'tests/modules/intake/**'
      - 'tests/e2e/intake/**'
      - 'package.json'
      - 'package-lock.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/intake-step3-gate.yml'

jobs:
  contracts-tests-step3:
    name: üìã Contract Tests (Step3)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Application Layer Tests
        run: npm test -- tests/modules/intake/application/step3/ --run

      - name: Run Actions Layer Tests
        run: npm test -- tests/modules/intake/actions/step3/ --run

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contract-test-results-step3
          path: coverage/
          retention-days: 7

  typecheck:
    name: üîç TypeScript Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Intake module types
        run: |
          echo "üîç Checking TypeScript types for Intake module..."
          npm run typecheck 2>&1 | tee typecheck-output.log

          # Filter for Intake-specific errors (excluding legacy/archive)
          grep -E "src/modules/intake" typecheck-output.log | grep -v "legacy\|archive" > intake-errors.log || true

          # Check if there are any critical errors
          if grep -E "error TS" intake-errors.log; then
            echo "‚ùå TypeScript errors found in Intake module"
            cat intake-errors.log
            exit 1
          else
            echo "‚úÖ TypeScript check passed for Intake module"
          fi

  eslint:
    name: üìù ESLint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint Intake module
        run: |
          echo "üìù Running ESLint on Intake module..."
          npm run lint -- src/modules/intake tests/modules/intake 2>&1 | tee eslint-output.log

          # Check for errors (not warnings)
          if grep -E "error" eslint-output.log | grep -v "0 errors"; then
            echo "‚ùå ESLint errors found in Intake module"
            exit 1
          else
            echo "‚úÖ ESLint check passed for Intake module"
          fi

  sentinel:
    name: üè• Sentinel Checks (SoC/PHI/A11y)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check anti-legacy compliance (Step3)
        run: |
          echo "üö´ Checking for legacy Step 3 stores..."

          # Check for legacy store imports
          if grep -r "from.*@/modules/intake/state/slices/step3['\"]" src/modules/intake/ui/step3-* --include="*.tsx" --include="*.ts" 2>/dev/null; then
            echo "‚ùå Legacy store import detected: Do not import from @/modules/intake/state/slices/step3"
            echo "   Use @/modules/intake/state/slices/step3-ui.slice instead"
            exit 1
          fi

          # Check for legacy store symbols
          LEGACY_SYMBOLS="useDiagnosesUIStore|usePsychiatricEvaluationUIStore|useFunctionalAssessmentUIStore"
          if grep -rE "$LEGACY_SYMBOLS" src/modules/intake/ui/step3-* --include="*.tsx" --include="*.ts" 2>/dev/null; then
            echo "‚ùå Legacy store usage detected: These stores were removed in RHF migration"
            echo "   Form data: Use React Hook Form (useForm + zodResolver)"
            echo "   UI flags: Use useStep3UiStore from step3-ui.slice.ts"
            exit 1
          fi

          # Check for RHF compliance in container
          if ! grep -r "useForm.*Step3DataPartial" src/modules/intake/ui/step3-diagnoses-clinical/Step3DiagnosesClinical.tsx 2>/dev/null; then
            echo "‚ùå RHF violation: Step 3 container must use React Hook Form"
            exit 1
          fi

          # Check for canonical store usage
          if ! grep -r "useStep3UiStore" src/modules/intake/ui/step3-diagnoses-clinical/Step3DiagnosesClinical.tsx 2>/dev/null; then
            echo "‚ùå State violation: Step 3 must use canonical useStep3UiStore for UI flags"
            exit 1
          fi

          # Check for zodResolver usage
          if ! grep -r "zodResolver.*step3DataPartialSchema" src/modules/intake/ui/step3-diagnoses-clinical/Step3DiagnosesClinical.tsx 2>/dev/null; then
            echo "‚ùå Validation violation: Step 3 must use zodResolver with step3DataPartialSchema"
            exit 1
          fi

          echo "‚úÖ Anti-legacy compliance check passed"

      - name: Check SoC compliance
        run: |
          echo "üèóÔ∏è Checking Separation of Concerns..."

          # Check Application doesn't import Infrastructure
          if grep -r "from.*infrastructure\|from.*@/infrastructure" src/modules/intake/application/ --include="*.ts" --include="*.tsx" 2>/dev/null; then
            echo "‚ùå SoC violation: Application importing Infrastructure"
            exit 1
          fi

          # Check Domain doesn't import from other layers
          if grep -r "from.*application\|from.*infrastructure\|from.*ui" src/modules/intake/domain/ --include="*.ts" --include="*.tsx" 2>/dev/null; then
            echo "‚ùå SoC violation: Domain importing from other layers"
            exit 1
          fi

          echo "‚úÖ SoC compliance check passed"

      - name: Check PHI protection
        run: |
          echo "üîí Checking PHI protection in State/UI..."

          # Check for clinical PHI fields in state (Step3 specific)
          PHI_PATTERNS="primaryDiagnosis|secondaryDiagnoses|substanceUseDisorder|mentalHealthHistory|currentSymptoms|treatmentHistory|psychiatricEvaluation|functionalAssessment"

          if grep -rE "$PHI_PATTERNS" src/modules/intake/state/slices/step3-ui.slice.ts --include="*.ts" 2>/dev/null | grep -v "// NO PHI"; then
            echo "‚ùå PHI violation: Clinical data found in state management"
            echo "   Clinical data must be managed by React Hook Form only"
            exit 1
          fi

          # Check for error.message exposure in UI
          if grep -r "error\.message" src/modules/intake/ui/step3-diagnoses-clinical/ --include="*.tsx" 2>/dev/null | grep -v "ERROR_MESSAGES\|Generic message"; then
            echo "‚ùå PHI violation: error.message exposed directly in UI"
            exit 1
          fi

          echo "‚úÖ PHI protection check passed"

      - name: Check multi-tenant reset
        run: |
          echo "üè¢ Checking multi-tenant reset implementation..."

          # Check for resetStep3Ui in state slice
          if ! grep -r "resetStep3Ui" src/modules/intake/state/slices/step3-ui.slice.ts 2>/dev/null; then
            echo "‚ùå Multi-tenant violation: Missing reset functionality in Step3"
            exit 1
          fi

          echo "‚úÖ Multi-tenant reset check passed"

      - name: Check accessibility
        run: |
          echo "‚ôø Checking accessibility compliance..."

          # Check for ARIA attributes in UI components
          if ! grep -r "role=\"alert\"\|aria-live\|aria-invalid\|aria-describedby" src/modules/intake/ui/step3-diagnoses-clinical/ --include="*.tsx" 2>/dev/null; then
            echo "‚ö†Ô∏è Warning: Missing ARIA attributes in Step3 UI"
          fi

          # Check for inline errors (not toasts)
          if grep -r "toast\.\|Toast" src/modules/intake/ui/step3-diagnoses-clinical/ --include="*.tsx" 2>/dev/null; then
            echo "‚ùå A11y violation: Using toast notifications instead of inline errors"
            exit 1
          fi

          echo "‚úÖ Accessibility check passed"

      - name: Check AUDIT documentation
        run: |
          echo "üìÑ Checking AUDIT documentation..."

          # Check for audit reports in tmp/
          if ls tmp/*step3*.md 2>/dev/null; then
            echo "‚úÖ AUDIT documentation found"
            ls -la tmp/*step3*.md
          else
            echo "‚ö†Ô∏è Warning: No AUDIT documentation found in tmp/"
          fi

  no-console:
    name: üö´ No Console Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for console statements
        run: |
          echo "üö´ Checking for console statements in production code..."

          # Search for console.* in src/ excluding tests and README
          CONSOLE_FOUND=false

          while IFS= read -r file; do
            if [[ ! "$file" =~ \.test\.|\.spec\.|README|\.md$ ]]; then
              if grep -l "console\.\(log\|warn\|error\|debug\|info\)" "$file" 2>/dev/null; then
                echo "‚ùå Console statement found in: $file"
                grep -n "console\." "$file"
                CONSOLE_FOUND=true
              fi
            fi
          done < <(find src/modules/intake/ui/step3-diagnoses-clinical -type f \( -name "*.ts" -o -name "*.tsx" \) 2>/dev/null)

          if [ "$CONSOLE_FOUND" = true ]; then
            echo "‚ùå Console statements found in production code"
            exit 1
          else
            echo "‚úÖ No console statements in production code"
          fi

  e2e-smoke-step3:
    name: üîÑ E2E Smoke Test (Step3)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run E2E Smoke Tests
        run: |
          echo "üîÑ Running E2E smoke tests for Step 3..."
          npm test -- tests/e2e/intake/step3/ --run

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-step3
          path: coverage/
          retention-days: 7

  gate-summary:
    name: üìä Gate Summary
    runs-on: ubuntu-latest
    needs: [contracts-tests-step3, typecheck, eslint, sentinel, no-console, e2e-smoke-step3]
    if: always()

    steps:
      - name: Gate Status Report
        run: |
          echo "üõ°Ô∏è Intake Step3 Gate Summary"
          echo "============================"
          echo ""
          echo "Contract Tests: ${{ needs.contracts-tests-step3.result }}"
          echo "TypeCheck: ${{ needs.typecheck.result }}"
          echo "ESLint: ${{ needs.eslint.result }}"
          echo "Sentinel: ${{ needs.sentinel.result }}"
          echo "No-Console: ${{ needs.no-console.result }}"
          echo "E2E Smoke: ${{ needs.e2e-smoke-step3.result }}"
          echo ""

          # Determine overall status
          if [ "${{ needs.contracts-tests-step3.result }}" == "success" ] && \
             [ "${{ needs.typecheck.result }}" == "success" ] && \
             [ "${{ needs.eslint.result }}" == "success" ] && \
             [ "${{ needs.sentinel.result }}" == "success" ] && \
             [ "${{ needs.no-console.result }}" == "success" ] && \
             [ "${{ needs.e2e-smoke-step3.result }}" == "success" ]; then
            echo "‚úÖ All checks passed - PR can be merged"
            echo ""
            echo "Compliance Summary:"
            echo "  ‚úÖ Contract tests passing"
            echo "  ‚úÖ TypeScript types valid"
            echo "  ‚úÖ ESLint rules satisfied"
            echo "  ‚úÖ SoC/PHI/A11y compliant"
            echo "  ‚úÖ No console statements"
            echo "  ‚úÖ E2E smoke tests passing"
          else
            echo "‚ùå Some checks failed - PR blocked"
            echo ""
            echo "Fix the following before merge:"
            [ "${{ needs.contracts-tests-step3.result }}" != "success" ] && echo "  ‚ùå Contract tests"
            [ "${{ needs.typecheck.result }}" != "success" ] && echo "  ‚ùå TypeScript errors"
            [ "${{ needs.eslint.result }}" != "success" ] && echo "  ‚ùå ESLint violations"
            [ "${{ needs.sentinel.result }}" != "success" ] && echo "  ‚ùå Sentinel checks"
            [ "${{ needs.no-console.result }}" != "success" ] && echo "  ‚ùå Console statements"
            [ "${{ needs.e2e-smoke-step3.result }}" != "success" ] && echo "  ‚ùå E2E smoke tests"
            exit 1
          fi

      - name: Comment PR Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const contracts = '${{ needs.contracts-tests-step3.result }}';
            const typecheck = '${{ needs.typecheck.result }}';
            const eslint = '${{ needs.eslint.result }}';
            const sentinel = '${{ needs.sentinel.result }}';
            const noconsole = '${{ needs.no-console.result }}';
            const e2esmoke = '${{ needs.e2e-smoke-step3.result }}';

            const allPassed = contracts === 'success' &&
                            typecheck === 'success' &&
                            eslint === 'success' &&
                            sentinel === 'success' &&
                            noconsole === 'success' &&
                            e2esmoke === 'success';

            const comment = `## üõ°Ô∏è Intake Step3 Gate Results

            ${allPassed ? '‚úÖ **PASSED**' : '‚ùå **FAILED**'} - Clinical Assessment Module CI Gate

            | Check | Status | Description |
            |-------|--------|-------------|
            | Contract Tests | ${contracts === 'success' ? '‚úÖ' : '‚ùå'} | Application & Actions layer tests |
            | TypeCheck | ${typecheck === 'success' ? '‚úÖ' : '‚ùå'} | TypeScript type validation |
            | ESLint | ${eslint === 'success' ? '‚úÖ' : '‚ùå'} | Code quality & style |
            | Sentinel | ${sentinel === 'success' ? '‚úÖ' : '‚ùå'} | SoC, PHI, Multi-tenant, A11y, Anti-Legacy |
            | No-Console | ${noconsole === 'success' ? '‚úÖ' : '‚ùå'} | No console in production |
            | E2E Smoke | ${e2esmoke === 'success' ? '‚úÖ' : '‚ùå'} | Full stack smoke test (RLS) |

            ${allPassed
              ? 'üéâ All checks passed! This PR is ready for review.'
              : 'üö´ Please fix the failing checks before this PR can be merged.'}

            ---
            *Required for merge: All checks must pass*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });